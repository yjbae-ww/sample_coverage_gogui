/* $$43564A43$$ WARNING: Do not edit. $$ This file has been instrumented by qualityscroll_cover_jacov 4.0.4-SNAPSHOT (Instrument Date:20240229123821) $$ */// AnalyzeDialog.java

package net.sf.gogui.gui;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.text.MessageFormat;
import java.util.ArrayList;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import net.sf.gogui.go.ConstPointList;
import net.sf.gogui.go.GoColor;
import static net.sf.gogui.go.GoColor.BLACK;
import static net.sf.gogui.go.GoColor.WHITE;
import static net.sf.gogui.go.GoColor.EMPTY;
import net.sf.gogui.go.GoPoint;
import net.sf.gogui.go.PointList;
import net.sf.gogui.gtp.AnalyzeCommand;
import net.sf.gogui.gtp.AnalyzeDefinition;
import net.sf.gogui.gtp.AnalyzeType;
import net.sf.gogui.gtp.GtpError;
import net.sf.gogui.gtp.GtpResponseFormatError;
import net.sf.gogui.gtp.GtpUtil;
import static net.sf.gogui.gui.I18n.i18n;
import net.sf.gogui.util.Platform;
import net.sf.gogui.util.PrefUtil;

/** Dialog for selecting an AnalyzeCommand. */
public final class AnalyzeDialog
    extends JDialog
    implements ActionListener, ListSelectionListener
{
    public static transient boolean[] $qualityscroll_cover_coverage_buffer = $qualityscroll_cover_coverage_buffer_init();public static boolean[] $qualityscroll_cover_coverage_buffer_init() {try{if($qualityscroll_cover_coverage_buffer != null){return $qualityscroll_cover_coverage_buffer;}java.lang.Class<?> thisClass = AnalyzeDialog.class.getClassLoader().loadClass("com.qualityscroll.cover.runtime.ProbeStore");java.lang.reflect.Method getProbesMethod = thisClass.getMethod("getProbes", long.class, long.class, long.class, java.lang.String.class, int.class);$qualityscroll_cover_coverage_buffer = (boolean[]) getProbesMethod.invoke(null,/* key(tuId + timestamp) */ 4634071252211839569L,/* translation unit id   */ -5088475436629291845L,/* timestamp             */ 1709177901721L,/* source file name      */ "AnalyzeDialog.java",/* probe size            */ 204);}catch(java.lang.Exception e){throw new java.lang.RuntimeException(e);}return $qualityscroll_cover_coverage_buffer;}private static boolean $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(int index) {$qualityscroll_cover_coverage_buffer[index] = true;return true;}/** Callback for actions generated by AnalyzeDialog. */
    public interface Listener
    {
        void actionClearAnalyzeCommand();

        void actionSetAnalyzeCommand(AnalyzeCommand command, boolean autoRun,
                                     boolean clearBoard, boolean oneRunOnly,
                                     boolean reuseTextWindow);
    }

    public AnalyzeDialog(Frame owner, Listener listener,
                         ArrayList<AnalyzeDefinition> commands,
                         GuiGtpClient gtp, MessageDialogs messageDialogs)
    {
        super(owner, i18n("TIT_ANALYZE"));$qualityscroll_cover_coverage_buffer_init();$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(0);
        m_messageDialogs = messageDialogs;
        m_gtp = gtp;
        m_commands = commands;
        m_listener = listener;
        Container contentPane = getContentPane();
        JPanel commandPanel = createCommandPanel();
        contentPane.add(commandPanel, BorderLayout.CENTER);
        comboBoxChanged();
        setSelectedColor(BLACK);
        int minWidth = commandPanel.getPreferredSize().width;
        setMinimumSize(new Dimension(minWidth, 192));
        pack();
        addWindowListener(new WindowAdapter() {
                @Override
				public void windowActivated(WindowEvent e) {
                    $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(1);m_comboBoxHistory.requestFocusInWindow();
                }
            });
    }

    @Override
	public void actionPerformed(ActionEvent event)
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(2);String command = event.getActionCommand();
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(3);if ((command.equals("clear")) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(5) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(4);clearCommand();}
        else {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(6);if ((command.equals("comboBoxChanged")) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(8) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(7);comboBoxChanged();}
        else {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(9);if ((command.equals("run")) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(11) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(10);runCommand();}
        else
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(12);assert false;}}}
    }

    @Override
	public void dispose()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(13);if ((! m_autoRun.isSelected()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(15) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(14);clearCommand();}
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(16);saveRecent();
        super.dispose();
    }

    public boolean getReuseTextWindow()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(17);return m_reuseWindow.isSelected();
    }

    public GoColor getSelectedColor()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(18);if ((m_black.isSelected()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(20) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(19);return BLACK;}
        else
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(21);return WHITE;}
    }

    public void saveRecent()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(22);ArrayList<String> recent = new ArrayList<String>(MAX_SAVE_RECENT);
        int start = (((m_firstIsTemp) ? ($qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(23) || true) : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(24) && false)) ? 1 : 0);
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(25);for (int i = start; (i < getComboBoxItemCount()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(27) && false); ++i)
        {
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(26);String name = getComboBoxItem(i);
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(38);if ((recent.indexOf(name) < 0) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(40) && false))
                {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(39);recent.add(name);}
        }
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(28);for (int i = 0; (i < m_fullRecentList.size()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(30) && false); ++i)
        {
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(29);if ((recent.size() == MAX_SAVE_RECENT) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(33) && false))
                {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(32);break;}
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(34);String name = m_fullRecentList.get(i);
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(35);if ((recent.indexOf(name) < 0) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(37) && false))
                {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(36);recent.add(name);}
        }
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(31);PrefUtil.putList("net/sf/gogui/gui/analyzedialog/recentcommands",
                         recent);
    }

    /** Set board size.
        Need for verifying responses to initial value for EPLIST commands.
        Default is 19. */
    public void setBoardSize(int boardSize)
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(41);m_boardSize = boardSize;
    }

    public void setReuseTextWindow(boolean enable)
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(42);m_reuseWindow.setSelected(enable);
    }

    public void setSelectedColor(GoColor color)
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(43);m_selectedColor = color;
        selectColor();
    }

    @Override
	public void valueChanged(ListSelectionEvent e)
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(44);int index = m_list.getSelectedIndex();
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(45);if ((index >= 0) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(47) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(46);selectCommand(index);}
    }

    private static final int MAX_SAVE_RECENT = 100;

    /** Is the first item in the history combo box a temporary item?
        Avoids that the first item in the history combo box is treated
        as a real history command, if it was not run. */
    private boolean m_firstIsTemp;

    private int m_boardSize = GoPoint.DEFAULT_SIZE;

    private ArrayList<String> m_fullRecentList;

    private GoColor m_selectedColor = EMPTY;

    private final MessageDialogs m_messageDialogs;

    private final GuiGtpClient m_gtp;

    private JButton m_clearButton;

    private JButton m_runButton;

    private JCheckBox m_autoRun;

    private JCheckBox m_clearBoard;

    private JCheckBox m_reuseWindow;

    /** @note JComboBox is a generic type since Java 7. We use a raw type
        and suppress unchecked warnings where needed to be compatible with
        earlier Java versions. */
    private JComboBox m_comboBoxHistory;

    /** @note JList is a generic type since Java 7. We use a raw type
        and suppress unchecked warnings where needed to be compatible with
        earlier Java versions. */
    private JList m_list;

    private Box m_colorBox;

    private JRadioButton m_black;

    private JRadioButton m_white;

    private final ArrayList<AnalyzeDefinition> m_commands;

    private final Listener m_listener;

    private String m_lastUpdateOptionsCommand;

    private void clearCommand()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(48);m_listener.actionClearAnalyzeCommand();
        m_autoRun.setSelected(false);
    }

    private void comboBoxChanged()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(49);Object item = m_comboBoxHistory.getSelectedItem();
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(50);if ((item == null) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(52) && false))
        {
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(51);m_list.clearSelection();
            return;
        }
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(53);String label = item.toString();
        updateOptions(label);
        String selectedValue = (String)m_list.getSelectedValue();
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(54);if ((selectedValue != null && ! selectedValue.equals(label)) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(56) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(55);m_list.clearSelection();}
    }

    private JPanel createButtons()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(57);JPanel innerPanel = new JPanel(new GridLayout(1, 0, GuiUtil.PAD, 0));
        m_runButton = new JButton(i18n("LB_RUN"));
        m_runButton.setToolTipText(i18n("TT_ANALYZE_RUN"));
        m_runButton.setActionCommand("run");
        m_runButton.addActionListener(this);
        m_runButton.setMnemonic(KeyEvent.VK_R);
        m_runButton.setEnabled(false);
        GuiUtil.setMacBevelButton(m_runButton);
        innerPanel.add(m_runButton);
        m_clearButton = new JButton(i18n("LB_ANALYZE_CLEAR"));
        m_clearButton.setToolTipText(i18n("TT_ANALYZE_CLEAR"));
        m_clearButton.setActionCommand("clear");
        m_clearButton.addActionListener(this);
        m_clearButton.setMnemonic(KeyEvent.VK_C);
        GuiUtil.setMacBevelButton(m_clearButton);
        innerPanel.add(m_clearButton);
        JPanel outerPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        outerPanel.add(innerPanel);
        return outerPanel;
    }

    private JComponent createColorPanel()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(58);m_colorBox = Box.createVerticalBox();
        ButtonGroup group = new ButtonGroup();
        m_black = new JRadioButton(i18n("LB_BLACK"));
        m_black.setToolTipText(i18n("TT_ANALYZE_BLACK"));
        m_black.setEnabled(false);
        group.add(m_black);
        m_colorBox.add(m_black);
        m_white = new JRadioButton(i18n("LB_WHITE"));
        m_white.setToolTipText(i18n("TT_ANALYZE_WHITE"));
        m_white.setEnabled(false);
        group.add(m_white);
        m_colorBox.add(m_white);
        return m_colorBox;
    }

    // See comment at m_list
    @SuppressWarnings("unchecked")
    private JPanel createCommandPanel()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(59);JPanel panel = new JPanel(new BorderLayout());
        m_list = new JList();
        m_list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        m_list.setVisibleRowCount(25);
        m_list.addMouseListener(new MouseAdapter() {
                @Override
				public void mouseClicked(MouseEvent e) {
                    $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(60);int modifiers = e.getModifiers();
                    int mask = ActionEvent.ALT_MASK;
                    $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(61);if ((e.getClickCount() == 2 || ((modifiers & mask) != 0)) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(63) && false))
                        {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(62);runCommand();}
                }
            });
        m_list.addFocusListener(new FocusAdapter() {
                @Override
				public void focusGained(FocusEvent e) {
                    $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(64);int index = getSelectedCommand();
                    $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(65);if ((index >= 0) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(67) && false))
                        {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(66);m_list.setSelectedIndex(index);}
                }
            });
        m_list.addListSelectionListener(this);
        JScrollPane scrollPane = new JScrollPane(m_list);
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(68);if ((Platform.isMac()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(70) && false))
            // Default Apple L&F uses no border, but Quaqua 3.7.4 does
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(69);scrollPane.setBorder(null);}
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(71);panel.add(scrollPane, BorderLayout.CENTER);
        panel.add(createLowerPanel(), BorderLayout.SOUTH);
        String[] labels = new String[m_commands.size()];
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(72);for (int i = 0; (i < m_commands.size()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(74) && false); ++i)
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(73);labels[i] = m_commands.get(i).getLabel();}
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(75);m_list.setListData(labels);
        comboBoxChanged();
        loadRecent();
        return panel;
    }

    private JComponent createLowerPanel()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(76);Box panel = Box.createVerticalBox();
        panel.add(GuiUtil.createFiller());
        m_comboBoxHistory = new JComboBox();
        panel.add(m_comboBoxHistory);
        Box lowerPanel = Box.createVerticalBox();
        lowerPanel.setBorder(GuiUtil.createEmptyBorder());
        panel.add(lowerPanel);
        Box optionsPanel = Box.createHorizontalBox();
        lowerPanel.add(optionsPanel);
        JPanel leftPanel = new JPanel();
        optionsPanel.add(leftPanel);
        Box leftBox = Box.createVerticalBox();
        leftPanel.add(leftBox);
        m_autoRun = new JCheckBox(i18n("LB_ANALYZE_AUTORUN"));
        m_autoRun.addItemListener(new ItemListener() {
                @Override
				public void itemStateChanged(ItemEvent e) {
                    $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(77);if ((! m_autoRun.isSelected()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(79) && false))
                        {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(78);m_listener.actionClearAnalyzeCommand();}
                }
            });
        m_autoRun.setToolTipText(i18n("TT_ANALYZE_AUTORUN"));
        m_autoRun.setEnabled(false);
        leftBox.add(m_autoRun);
        m_clearBoard = new JCheckBox(i18n("LB_ANALYZE_CLEARBOARD"));
        m_clearBoard.setToolTipText(i18n("TT_ANALYZE_CLEARBOARD"));
        m_clearBoard.setEnabled(false);
        leftBox.add(m_clearBoard);
        m_clearBoard.setSelected(true);
        m_reuseWindow = new JCheckBox(i18n("LB_ANALYZE_REUSE_TEXT_WINDOW"));
        m_reuseWindow.setToolTipText(i18n("TT_ANALYZE_REUSE_TEXT_WINDOW"));
        leftBox.add(m_reuseWindow);
        JPanel rightPanel = new JPanel();
        rightPanel.add(createColorPanel());
        optionsPanel.add(rightPanel);

        // TODO: The following horizontal glue does not really work as expected
        // (tested on Linux/Sun Java 1.6.0_14) and the left two components in
        // the box are not aligned to the left.
        optionsPanel.add(Box.createHorizontalGlue());

        // TODO: If GTK Looks L&F is used on Linux/Sun Java 1.6.0_14 or OpenJDK
        // 6b14-1.4.1-0ubuntu11, then the text of the checkbox items can be
        // truncated a bit on the left (wrong minimum size calculation?). The
        // two fillers are a workaround for this.
        optionsPanel.add(GuiUtil.createFiller());
        optionsPanel.add(GuiUtil.createFiller());

        lowerPanel.add(createButtons());
        m_comboBoxHistory.addActionListener(this);
        return panel;
    }

    private String getComboBoxItem(int i)
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(80);return m_comboBoxHistory.getItemAt(i).toString();
    }

    private int getComboBoxItemCount()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(81);return m_comboBoxHistory.getItemCount();
    }

    private int getCommandIndex(String label)
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(82);for (int i = 0; (i < m_commands.size()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(84) && false); ++i)
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(83);if ((m_commands.get(i).getLabel().equals(label)) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(87) && false))
                {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(86);return i;}}
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(85);return -1;
    }

    private int getSelectedCommand()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(88);Object item = m_comboBoxHistory.getSelectedItem();
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(89);if ((item == null) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(91) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(90);return -1;}
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(92);return getCommandIndex(item.toString());
    }

    // See comment at m_comboBoxHistory
    @SuppressWarnings("unchecked")
    private void insertComboBoxItem(String label, int index)
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(93);m_comboBoxHistory.insertItemAt(GuiUtil.createComboBoxItem(label),
                                       index);
    }

    // See comment at m_comboBoxHistory
    @SuppressWarnings("unchecked")
    private void loadRecent()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(94);m_comboBoxHistory.removeAllItems();
        m_fullRecentList =
            PrefUtil.getList("net/sf/gogui/gui/analyzedialog/recentcommands");
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(95);for (int i = 0; (i < m_fullRecentList.size()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(97) && false); ++i)
        {
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(96);String name = m_fullRecentList.get(i);
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(103);if ((getCommandIndex(name) >= 0) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(105) && false))
                {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(104);m_comboBoxHistory.addItem(GuiUtil.createComboBoxItem(name));}
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(106);if ((m_comboBoxHistory.getItemCount() > 20) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(108) && false))
                {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(107);break;}
        }
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(98);int index = getSelectedCommand();
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(99);if ((index >= 0) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(101) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(100);selectCommand(index);}
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(102);m_firstIsTemp = false;
    }

    private void runCommand()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(109);if ((m_gtp.isCommandInProgress()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(111) && false))
        {
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(110);showError("MSG_ANALYZE_CANNOT_EXECUTE",
                      "MSG_ANALYZE_CANNOT_EXECUTE_2",
                      false);
            return;
        }
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(112);int index = getSelectedCommand();
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(113);if ((index < 0) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(115) && false))
        {
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(114);String name = m_gtp.getName();
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(116);if ((name == null) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(118) && false))
                {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(117);showError("MSG_ANALYZE_NOT_SUPPORTED",
                          "MSG_ANALYZE_NOT_SUPPORTED_2", false);}
            else
                {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(120);showError("MSG_ANALYZE_NOT_SUPPORTED",
                          "MSG_ANALYZE_NOT_SUPPORTED_3", false, name);}
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(119);return;
        }
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(121);updateRecent(index);
        AnalyzeCommand command = new AnalyzeCommand(m_commands.get(index));
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(122);if ((command.needsColorArg()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(124) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(123);command.setColorArg(getSelectedColor());}
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(125);String label = command.getResultTitle();
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(126);if ((command.needsStringArg()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(128) && false))
        {
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(127);String stringArg =
                JOptionPane.showInputDialog(this, label,
                                            i18n("TIT_INPUT"),
                                            JOptionPane.PLAIN_MESSAGE);
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(129);if ((stringArg == null) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(131) && false))
                {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(130);return;}
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(132);command.setStringArg(stringArg);
        }
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(133);if ((command.needsOptStringArg()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(135) && false))
        {
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(134);command.setOptStringArg("");
            String commandWithoutArg =
                command.replaceWildCards(m_selectedColor);
            try
            {
                $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(136);String value = m_gtp.send(commandWithoutArg);
                Object optStringArg =
                    JOptionPane.showInputDialog(this, label,
                                                i18n("TIT_INPUT"),
                                                JOptionPane.PLAIN_MESSAGE,
                                                null, null, value);
                $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(137);if ((optStringArg == null || optStringArg.equals(value)) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(139) && false))
                    {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(138);return;}
                $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(140);command.setOptStringArg((String)optStringArg);
            }
            catch (GtpError e)
            {
                $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(172);showError("MSG_ANALYZE_COMMAND_FAILED",
                          e.getMessage(), false, commandWithoutArg);
                return;
            }
        }
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(141);if ((command.getType() == AnalyzeType.EPLIST) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(143) && false))
        {
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(142);command.setPointListArg(new PointList());
            String commandWithoutArg =
                command.replaceWildCards(m_selectedColor) + " show";
            try
            {
                $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(144);String response = m_gtp.send(commandWithoutArg);
                ConstPointList pointList =
                    GtpUtil.parsePointList(response, m_boardSize);
                command.setPointListArg(pointList);
            }
            catch (GtpError e)
            {
                $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(170);showError("MSG_ANALYZE_COMMAND_FAILED",
                          e.getMessage(), false, commandWithoutArg);
                return;
            }
            catch (GtpResponseFormatError e)
            {
                $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(171);showError("MSG_ANALYZE_INVALID_RESPONSE",
                          "MSG_ANALYZE_INVALID_RESPONSE_2", true,
                          commandWithoutArg, e.getMessage());
                return;
            }
        }
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(145);if ((command.needsFileArg()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(147) && false))
        {
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(146);File fileArg = FileDialogs.showSelectFile(this, label);
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(148);if ((fileArg == null) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(150) && false))
                {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(149);return;}
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(151);command.setFileArg(fileArg);
        }
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(152);if ((command.needsFileOpenArg()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(154) && false))
        {
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(153);File fileArg = FileDialogs.showOpen(this, label);
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(155);if ((fileArg == null) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(157) && false))
                {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(156);return;}
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(158);command.setFileOpenArg(fileArg);
        }
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(159);if ((command.needsFileSaveArg()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(161) && false))
        {
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(160);File fileArg = FileDialogs.showSave(this, label, m_messageDialogs);
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(162);if ((fileArg == null) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(164) && false))
                {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(163);return;}
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(165);command.setFileSaveArg(fileArg);
        }
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(166);if ((command.needsColorArg()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(168) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(167);command.setColorArg(getSelectedColor());}
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(169);boolean autoRun = m_autoRun.isEnabled() && m_autoRun.isSelected();
        boolean clearBoard =
            ! m_clearBoard.isEnabled() || m_clearBoard.isSelected();
        boolean reuseWindow =
            m_reuseWindow.isEnabled() && m_reuseWindow.isSelected();
        m_listener.actionSetAnalyzeCommand(command, autoRun, clearBoard,
                                           false, reuseWindow);
    }

    private void selectCommand(int index)
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(173);String label = m_commands.get(index).getLabel();
        updateOptions(label);
        m_comboBoxHistory.removeActionListener(this);
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(174);if ((m_firstIsTemp && getComboBoxItemCount() > 0) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(176) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(175);m_comboBoxHistory.removeItemAt(0);}
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(177);if ((getComboBoxItemCount() == 0 || ! getComboBoxItem(0).equals(label)) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(179) && false))
        {
            $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(178);insertComboBoxItem(label, 0);
            m_firstIsTemp = true;
            m_comboBoxHistory.setSelectedIndex(0);
        }
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(180);m_comboBoxHistory.addActionListener(this);
    }

    private void selectColor()
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(181);if ((m_selectedColor == BLACK) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(183) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(182);m_black.setSelected(true);}
        else {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(184);if ((m_selectedColor == WHITE) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(186) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(185);m_white.setSelected(true);}}
    }

    private void showError(String mainMessage, String optionalMessage,
                           boolean isCritical)
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(187);m_messageDialogs.showError(this, i18n(mainMessage),
                                   i18n(optionalMessage),
                                   isCritical);
    }

    private void showError(String mainMessage, String optionalMessage,
                           boolean isCritical, Object... args)
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(188);optionalMessage =
            MessageFormat.format(i18n(optionalMessage), args);
        m_messageDialogs.showError(this, i18n(mainMessage),
                                   optionalMessage, isCritical);
    }

    private void updateOptions(String label)
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(189);if ((label.equals(m_lastUpdateOptionsCommand)) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(191) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(190);return;}
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(192);m_lastUpdateOptionsCommand = label;
        int index = getCommandIndex(label);
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(193);if ((index < 0) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(195) && false))
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(194);return;}
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(196);AnalyzeCommand command =
            new AnalyzeCommand(m_commands.get(index));
        boolean needsColorArg = command.needsColorArg();
        m_black.setEnabled(needsColorArg);
        m_white.setEnabled(needsColorArg);
        m_autoRun.setEnabled(command.getType() != AnalyzeType.PARAM);
        m_autoRun.setSelected(false);
        m_clearBoard.setEnabled(command.getType() != AnalyzeType.PARAM);
        m_runButton.setEnabled(true);
    }

    private void updateRecent(int index)
    {
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(197);String label = m_commands.get(index).getLabel();
        insertComboBoxItem(label, 0);
        m_comboBoxHistory.setSelectedIndex(0);
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(198);for (int i = 1; (i < getComboBoxItemCount()) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(200) && false); ++i)
            {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(199);if ((getComboBoxItem(i).equals(label)) ? true : (!$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(203) && false))
                {$qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(202);m_comboBoxHistory.removeItemAt(i);}}
        $qualityscroll_cover_jacov_probe_b9621a8cdf690cbb(201);m_firstIsTemp = false;
    }
}
