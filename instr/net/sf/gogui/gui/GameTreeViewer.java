/* $$43564A43$$ WARNING: Do not edit. $$ This file has been instrumented by qualityscroll_cover_jacov 4.0.4-SNAPSHOT (Instrument Date:20240229123822) $$ */// GameTreeViewer.java

package net.sf.gogui.gui;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JDialog;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.ScrollPaneConstants;

import net.sf.gogui.game.ConstNode;
import net.sf.gogui.game.ConstGameTree;
import static net.sf.gogui.gui.I18n.i18n;
import net.sf.gogui.util.Platform;

/** Dialog for displaying the game tree. */
public class GameTreeViewer
    extends JDialog
{
    public static transient boolean[] $qualityscroll_cover_coverage_buffer = $qualityscroll_cover_coverage_buffer_init();public static boolean[] $qualityscroll_cover_coverage_buffer_init() {try{if($qualityscroll_cover_coverage_buffer != null){return $qualityscroll_cover_coverage_buffer;}java.lang.Class<?> thisClass = GameTreeViewer.class.getClassLoader().loadClass("com.qualityscroll.cover.runtime.ProbeStore");java.lang.reflect.Method getProbesMethod = thisClass.getMethod("getProbes", long.class, long.class, long.class, java.lang.String.class, int.class);$qualityscroll_cover_coverage_buffer = (boolean[]) getProbesMethod.invoke(null,/* key(tuId + timestamp) */ 2128329360677904919L,/* translation unit id   */ -5807179402728247879L,/* timestamp             */ 1709177902201L,/* source file name      */ "GameTreeViewer.java",/* probe size            */ 25);}catch(java.lang.Exception e){throw new java.lang.RuntimeException(e);}return $qualityscroll_cover_coverage_buffer;}private static boolean $qualityscroll_cover_jacov_probe_af68c119d96aedb9(int index) {$qualityscroll_cover_coverage_buffer[index] = true;return true;}/** Callback for events generated by GameTreeViewer. */
    public interface Listener
    {
        void actionGotoNode(ConstNode node);
    }

    public GameTreeViewer(Frame owner, Listener listener,
                          MessageDialogs messageDialogs)
    {
        super(owner, i18n("TIT_TREE"));$qualityscroll_cover_coverage_buffer_init();$qualityscroll_cover_jacov_probe_af68c119d96aedb9(0);
        Container contentPane = getContentPane();
        m_panel = new GameTreePanel(this, listener,
                                    GameTreePanel.Label.NUMBER,
                                    GameTreePanel.Size.NORMAL,
                                    messageDialogs);
        m_scrollPane =
            new JScrollPane(m_panel,
                            ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,
                            ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        $qualityscroll_cover_jacov_probe_af68c119d96aedb9(1);if ((Platform.isMac()) ? true : (!$qualityscroll_cover_jacov_probe_af68c119d96aedb9(3) && false))
            // Default Apple L&F uses no border, but Quaqua 3.7.4 does
            {$qualityscroll_cover_jacov_probe_af68c119d96aedb9(2);m_scrollPane.setBorder(null);}
        $qualityscroll_cover_jacov_probe_af68c119d96aedb9(4);GuiUtil.removeKeyBinding(m_scrollPane, "control END");
        KeyAdapter keyAdapter = new KeyAdapter()
            {
                @Override
				public void keyReleased(KeyEvent e)
                {
                    $qualityscroll_cover_jacov_probe_af68c119d96aedb9(5);int c = e.getKeyCode();
                    int mod = e.getModifiers();
                    $qualityscroll_cover_jacov_probe_af68c119d96aedb9(6);if (((mod & m_shortcut) == 0) ? true : (!$qualityscroll_cover_jacov_probe_af68c119d96aedb9(8) && false))
                    {
                        $qualityscroll_cover_jacov_probe_af68c119d96aedb9(7);if ((c == KeyEvent.VK_HOME) ? true : (!$qualityscroll_cover_jacov_probe_af68c119d96aedb9(10) && false))
                            {$qualityscroll_cover_jacov_probe_af68c119d96aedb9(9);scrollToCurrent();}
                        $qualityscroll_cover_jacov_probe_af68c119d96aedb9(11);return;
                    }
                    $qualityscroll_cover_jacov_probe_af68c119d96aedb9(12);boolean shift = ((mod & ActionEvent.SHIFT_MASK) != 0);
                    $qualityscroll_cover_jacov_probe_af68c119d96aedb9(13);if ((c == KeyEvent.VK_ENTER && ! shift) ? true : (!$qualityscroll_cover_jacov_probe_af68c119d96aedb9(15) && false))
                        {$qualityscroll_cover_jacov_probe_af68c119d96aedb9(14);m_panel.showPopup();}
                }

                private final int m_shortcut
                    = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();
            };
        m_scrollPane.addKeyListener(keyAdapter);
        m_panel.setScrollPane(m_scrollPane);
        m_scrollPane.setFocusable(true);
        m_scrollPane.setFocusTraversalKeysEnabled(false);
        JViewport viewport = m_scrollPane.getViewport();
        viewport.setBackground(GameTreePanel.BACKGROUND);
        contentPane.add(m_scrollPane, BorderLayout.CENTER);
        viewport.setFocusTraversalKeysEnabled(false);
        setFocusTraversalKeysEnabled(false);
        addWindowListener(new WindowAdapter() {
                @Override
				public void windowActivated(WindowEvent e) {
                    $qualityscroll_cover_jacov_probe_af68c119d96aedb9(16);m_scrollPane.requestFocusInWindow();
                }
            });
        setMinimumSize(new Dimension(128, 96));
        pack();
    }

    public void addNewSingleChild(ConstNode node)
    {
        $qualityscroll_cover_jacov_probe_af68c119d96aedb9(17);m_panel.addNewSingleChild(node);
    }

    public void redrawCurrentNode()
    {
        $qualityscroll_cover_jacov_probe_af68c119d96aedb9(18);m_panel.redrawCurrentNode();
    }

    public void scrollToCurrent()
    {
        $qualityscroll_cover_jacov_probe_af68c119d96aedb9(19);m_panel.scrollToCurrent();
    }

    public void setLabelMode(GameTreePanel.Label mode)
    {
        $qualityscroll_cover_jacov_probe_af68c119d96aedb9(20);m_panel.setLabelMode(mode);
    }

    public void setSizeMode(GameTreePanel.Size mode)
    {
        $qualityscroll_cover_jacov_probe_af68c119d96aedb9(21);m_panel.setSizeMode(mode);
    }

    public void setShowSubtreeSizes(boolean enable)
    {
        $qualityscroll_cover_jacov_probe_af68c119d96aedb9(22);m_panel.setShowSubtreeSizes(enable);
    }

    public void update(ConstGameTree gameTree, ConstNode currentNode)
    {
        $qualityscroll_cover_jacov_probe_af68c119d96aedb9(23);Dimension size = m_scrollPane.getViewport().getSize();
        m_panel.update(gameTree, currentNode, size.width, size.height);
        repaint();
    }

    public void update(ConstNode currentNode)
    {
        $qualityscroll_cover_jacov_probe_af68c119d96aedb9(24);Dimension size = m_scrollPane.getViewport().getSize();
        m_panel.update(currentNode, size.width, size.height);
    }

    private final GameTreePanel m_panel;

    private final JScrollPane m_scrollPane;
}
