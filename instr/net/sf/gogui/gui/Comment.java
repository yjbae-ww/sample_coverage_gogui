/* $$43564A43$$ WARNING: Do not edit. $$ This file has been instrumented by qualityscroll_cover_jacov 4.0.4-SNAPSHOT (Instrument Date:20240229123821) $$ */// Comment.java

package net.sf.gogui.gui;

import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Dimension;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.UIManager;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import net.sf.gogui.util.Platform;

/** Scroll pane for displaying a comment to the current game node. */
public class Comment
    extends JScrollPane
    implements DocumentListener
{
    public static transient boolean[] $qualityscroll_cover_coverage_buffer = $qualityscroll_cover_coverage_buffer_init();public static boolean[] $qualityscroll_cover_coverage_buffer_init() {try{if($qualityscroll_cover_coverage_buffer != null){return $qualityscroll_cover_coverage_buffer;}java.lang.Class<?> thisClass = Comment.class.getClassLoader().loadClass("com.qualityscroll.cover.runtime.ProbeStore");java.lang.reflect.Method getProbesMethod = thisClass.getMethod("getProbes", long.class, long.class, long.class, java.lang.String.class, int.class);$qualityscroll_cover_coverage_buffer = (boolean[]) getProbesMethod.invoke(null,/* key(tuId + timestamp) */ 8243270775914861179L,/* translation unit id   */ -6270691752387705806L,/* timestamp             */ 1709177901882L,/* source file name      */ "Comment.java",/* probe size            */ 44);}catch(java.lang.Exception e){throw new java.lang.RuntimeException(e);}return $qualityscroll_cover_coverage_buffer;}private static boolean $qualityscroll_cover_jacov_probe_a8fa071322f58432(int index) {$qualityscroll_cover_coverage_buffer[index] = true;return true;}/** Callback for events generated by Comment. */
    public interface Listener
    {
        void changed(String comment);

        /** Callback if some text is selected. */
        void textSelected(String text);
    }

    public Comment(Listener listener)
    {$qualityscroll_cover_coverage_buffer_init();
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(0);m_listener = listener;
        m_textPane = new JTextPane();
        setFocusTraversalKeys(m_textPane);
        GuiUtil.addStyle(m_textPane, "marked", Color.white,
                         Color.decode("#38d878"), false);
        setPreferredSize();
        m_textPane.getDocument().addDocumentListener(this);
        CaretListener caretListener = new CaretListener()
            {
                @Override
				public void caretUpdate(CaretEvent event)
                {
                    $qualityscroll_cover_jacov_probe_a8fa071322f58432(1);if ((m_listener == null) ? true : (!$qualityscroll_cover_jacov_probe_a8fa071322f58432(3) && false))
                        {$qualityscroll_cover_jacov_probe_a8fa071322f58432(2);return;}
                    $qualityscroll_cover_jacov_probe_a8fa071322f58432(4);m_listener.textSelected(m_textPane.getSelectedText());
                }
            };
        m_textPane.addCaretListener(caretListener);
        setViewportView(m_textPane);
        setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(5);if ((Platform.isMac()) ? true : (!$qualityscroll_cover_jacov_probe_a8fa071322f58432(7) && false))
            {$qualityscroll_cover_jacov_probe_a8fa071322f58432(6);m_normalFont = new Font("Lucida Grande", Font.PLAIN, 11);}
        else
            {$qualityscroll_cover_jacov_probe_a8fa071322f58432(9);m_normalFont = UIManager.getFont("TextPane.font");}
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(8);setMonoFont(false);
    }

    @Override
	public void changedUpdate(DocumentEvent e)
    {
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(10);fireChangedEvent();
    }

    public boolean getMonoFont()
    {
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(11);return m_monoFont;
    }

    public boolean getScrollableTracksViewportWidth()
    {
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(12);return true;
    }

    public String getSelectedText()
    {
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(13);return m_textPane.getSelectedText();
    }

    @Override
	public void insertUpdate(DocumentEvent e)
    {
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(14);fireChangedEvent();
    }

    public void markAll(Pattern pattern)
    {
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(15);Document doc = m_textPane.getDocument();
        try
        {
            $qualityscroll_cover_jacov_probe_a8fa071322f58432(16);CharSequence text = doc.getText(0, doc.getLength());
            Matcher matcher = pattern.matcher(text);
            boolean firstMatch = true;
            $qualityscroll_cover_jacov_probe_a8fa071322f58432(17);while ((matcher.find()) ? true : (!$qualityscroll_cover_jacov_probe_a8fa071322f58432(19) && false))
            {
                $qualityscroll_cover_jacov_probe_a8fa071322f58432(18);int start = matcher.start();
                int end = matcher.end();
                $qualityscroll_cover_jacov_probe_a8fa071322f58432(20);if ((firstMatch) ? true : (!$qualityscroll_cover_jacov_probe_a8fa071322f58432(22) && false))
                {
                    $qualityscroll_cover_jacov_probe_a8fa071322f58432(21);GuiUtil.setStyle(m_textPane, 0, doc.getLength(), null);
                    m_textPane.setCaretPosition(start);
                    firstMatch = false;
                }
                $qualityscroll_cover_jacov_probe_a8fa071322f58432(23);GuiUtil.setStyle(m_textPane, start, end - start, "marked");
            }
        }
        catch (BadLocationException e)
        {
            $qualityscroll_cover_jacov_probe_a8fa071322f58432(24);assert false;
        }
    }

    @Override
	public void removeUpdate(DocumentEvent e)
    {
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(25);fireChangedEvent();
    }

    /** Enable/disable fixed size font. */
    public final void setMonoFont(boolean enable)
    {
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(26);if ((enable) ? true : (!$qualityscroll_cover_jacov_probe_a8fa071322f58432(28) && false))
            {$qualityscroll_cover_jacov_probe_a8fa071322f58432(27);GuiUtil.setMonospacedFont(m_textPane);}
        else
            {$qualityscroll_cover_jacov_probe_a8fa071322f58432(30);m_textPane.setFont(m_normalFont);}
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(29);m_monoFont = enable;
        m_textPane.repaint();
    }

    public void setComment(String comment)
    {
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(31);if ((comment == null) ? true : (!$qualityscroll_cover_jacov_probe_a8fa071322f58432(33) && false))
            {$qualityscroll_cover_jacov_probe_a8fa071322f58432(32);comment = "";}
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(34);if ((comment.equals(m_textPane.getText())) ? true : (!$qualityscroll_cover_jacov_probe_a8fa071322f58432(36) && false))
            {$qualityscroll_cover_jacov_probe_a8fa071322f58432(35);return;}
        // setText() generates a remove and insert event, and
        // we don't want to notify the listener about that yet
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(37);m_duringSetText = true;
        m_textPane.setText(comment);
        m_textPane.setCaretPosition(0);
        m_duringSetText = false;
    }

    public final void setPreferredSize()
    {
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(38);int fontSize = GuiUtil.getDefaultMonoFontSize();
        setPreferredSize(new Dimension(15 * fontSize, 5 * fontSize));
    }

    private boolean m_monoFont;

    private boolean m_duringSetText;

    private final JTextPane m_textPane;

    private final Listener m_listener;

    private final Font m_normalFont;

    private void fireChangedEvent()
    {
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(39);if ((m_duringSetText) ? true : (!$qualityscroll_cover_jacov_probe_a8fa071322f58432(41) && false))
            {$qualityscroll_cover_jacov_probe_a8fa071322f58432(40);return;}
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(42);String comment = m_textPane.getText();
        m_listener.changed(comment);
    }

    private static void setFocusTraversalKeys(JTextPane textPane)
    {$qualityscroll_cover_coverage_buffer_init();
        $qualityscroll_cover_jacov_probe_a8fa071322f58432(43);int id = KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS;
        Set<AWTKeyStroke> keystrokes = new HashSet<AWTKeyStroke>();
        keystrokes.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_TAB, 0));
        textPane.setFocusTraversalKeys(id, keystrokes);
    }
}
